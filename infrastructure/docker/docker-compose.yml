services:
  # --- MySQL ---
  db:
    image: mysql:8.4
    container_name: english-mysql
    environment:
      MYSQL_DATABASE: english
      MYSQL_USER: app
      MYSQL_PASSWORD: app
      MYSQL_ROOT_PASSWORD: root
    ports: ["3306:3306"]
    volumes:
      - db_data:/var/lib/mysql
      - ../mysql-init:/docker-entrypoint-initdb.d
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "127.0.0.1", "-u", "root", "-proot"]
      interval: 5s
      timeout: 3s
      retries: 25
    networks: [net]

  # --- Keycloak ---
  keycloak:
    image: quay.io/keycloak/keycloak:24.0
    container_name: english-keycloak
    command: >
      start-dev
      --import-realm
    environment:
      KEYCLOAK_ADMIN: admin
      KEYCLOAK_ADMIN_PASSWORD: admin
      KC_HOSTNAME_STRICT: "false"
      KC_HOSTNAME_STRICT_HTTPS: "false"
      KC_HTTP_ENABLED: "true"
      KC_HEALTH_ENABLED: "true"
    volumes:
      - ../keycloak/realm-export.json:/opt/keycloak/data/import/realm-export.json:ro
    ports: ["8081:8080"]
    healthcheck:
      test: ["CMD-SHELL", "bash -lc 'exec 3<>/dev/tcp/127.0.0.1/8080'"]
      interval: 10s
      timeout: 3s
      retries: 30
    networks: [net]

  # --- Backend (Word Manager / domínio) ---
  word-manager:
    build:
      context: ../../backend/word-manager
      dockerfile: Dockerfile
    container_name: word-manager
    environment:
      SPRING_PROFILES_ACTIVE: docker
      SPRING_DATASOURCE_URL: jdbc:mysql://db:3306/english?createDatabaseIfNotExist=true&useSSL=false&allowPublicKeyRetrieval=true&serverTimezone=UTC
      SPRING_DATASOURCE_USERNAME: app
      SPRING_DATASOURCE_PASSWORD: app
      SPRING_SECURITY_OAUTH2_RESOURCESERVER_JWT_JWK_SET_URI: http://keycloak:8080/realms/english-realm/protocol/openid-connect/certs
      KC_AUTH_SERVER_URL: http://keycloak:8080/realms/english-realm
      SERVER_FORWARD_HEADERS_STRATEGY: framework
      SPRING_KAFKA_BOOTSTRAP_SERVERS: kafka:9092
      SPRING_KAFKA_PROPERTIES_SECURITY_PROTOCOL: PLAINTEXT
      SPRING_KAFKA_CONSUMER_AUTO_OFFSET_RESET: earliest  # opcional mas útil p/ consumir do início em dev
    ports: ["8080:8080"]
    depends_on:
      db:
        condition: service_healthy
      keycloak:
        condition: service_healthy
    networks: [net]

  # --- File Manager (processar arquivos) ---
  file-manager:
    build:
      context: ../../backend/file-manager
      dockerfile: Dockerfile
    container_name: english-file-manager
    environment:
      SPRING_PROFILES_ACTIVE: docker
      SPRING_DATASOURCE_URL: jdbc:mysql://db:3306/english?createDatabaseIfNotExist=true&useSSL=false&allowPublicKeyRetrieval=true&serverTimezone=UTC
      SPRING_DATASOURCE_USERNAME: app
      SPRING_DATASOURCE_PASSWORD: app
      SPRING_SECURITY_OAUTH2_RESOURCESERVER_JWT_ISSUER_URI: http://keycloak:8080/realms/english-realm

      # Config do file-manager
      MINIO_ENDPOINT: http://minio:9000
      MINIO_ACCESS_KEY: admin
      MINIO_SECRET_KEY: admin123
      MINIO_BUCKET: countword
      DOMAIN_BASE_URL: http://word-manager:8080
      PUBLISH_MODE: rest
      FILE_ALLOWED_CONTENT_TYPES: text/plain
      FILE_MAX_SIZE_BYTES: 2097152
      WEBHOOK_HMAC_SECRET: ""
    ports: ["8082:8082"]
    depends_on:
      db:
        condition: service_healthy
      keycloak:
        condition: service_healthy
      minio:
        condition: service_healthy
    networks: [net]

  # --- Kong (opcional para dev; expõe /api) ---
  kong:
    image: kong:3.6
    container_name: kong
    environment:
      KONG_DATABASE: "off"
      KONG_DECLARATIVE_CONFIG: /kong/kong.yml
      KONG_PROXY_LISTEN: "0.0.0.0:8000"
      KONG_ADMIN_LISTEN: "0.0.0.0:8001"
      KONG_LOG_LEVEL: notice
    volumes:
      - ../kong/kong.yml:/kong/kong.yml:ro
    ports:
      - "8000:8000"
      - "8001:8001"
    depends_on:
      word-manager:
        condition: service_started
      keycloak:
        condition: service_healthy
    networks: [net]

  # --- Konga (UI do Kong) ---
  konga:
    image: pantsel/konga:latest
    container_name: konga
    ports: ["1337:1337"]
    environment:
      NODE_ENV: development
    depends_on:
      - kong
    networks: [net]

  minio:
    image: minio/minio:latest
    container_name: minio
    command: server /data --console-address ":9001"
    environment:
      MINIO_ROOT_USER: admin
      MINIO_ROOT_PASSWORD: admin123

      # >>> NOVO: define o destino Kafka "k1"
      MINIO_NOTIFY_KAFKA_ENABLE_k1: "on"
      MINIO_NOTIFY_KAFKA_BROKERS_k1: "kafka:9092"
      MINIO_NOTIFY_KAFKA_TOPIC_k1: "minio-events"

    ports:
      - "9000:9000"
      - "9001:9001"
    volumes:
      - minio_data:/data
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/ready"]
      interval: 10s
      timeout: 5s
      retries: 30
    networks: [net]


  # --- Kafka (KRaft, para evolução futura) ---
  kafka:
    image: bitnami/kafka:latest
    container_name: kafka
    ports:
      - "9092:9092"
      - "9094:9094"
    environment:
      - KAFKA_ENABLE_KRAFT=yes
      - KAFKA_CFG_PROCESS_ROLES=broker,controller
      - KAFKA_CFG_NODE_ID=1
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=1@kafka:9093
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,CONTROLLER://:9093,EXTERNAL://:9094
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092,EXTERNAL://localhost:9094
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT,EXTERNAL:PLAINTEXT
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
      - ALLOW_PLAINTEXT_LISTENER=yes
    volumes:
      - kafka_data:/bitnami/kafka
    networks: [net]

  # --- Kafka UI ---
  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: kafka-ui
    ports: ["8085:8080"]
    environment:
      - KAFKA_CLUSTERS_0_NAME=local
      - KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS=kafka:9092
    depends_on:
      - kafka
    networks: [net]

networks:
  net:
    name: net

volumes:
  db_data:
  minio_data:
  kafka_data:
