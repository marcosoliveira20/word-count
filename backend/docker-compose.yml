version: "3.9"

services:
  db:
    image: mysql:8.4
    container_name: english-mysql
    environment:
      MYSQL_DATABASE: english
      MYSQL_USER: app
      MYSQL_PASSWORD: app
      MYSQL_ROOT_PASSWORD: root
    ports: ["3306:3306"]
    volumes:
      - db_data:/var/lib/mysql
      - ./mysql-init:/docker-entrypoint-initdb.d
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "127.0.0.1", "-u", "root", "-proot"]
      interval: 5s
      timeout: 3s
      retries: 25
    networks: [net]

  keycloak:
    image: quay.io/keycloak/keycloak:24.0
    container_name: english-keycloak
    # modo dev + importa o realm montado no volume
    command: >
      start-dev
      --import-realm
    environment:
      KEYCLOAK_ADMIN: admin
      KEYCLOAK_ADMIN_PASSWORD: admin
      # Em dev local, NÃO fixar KC_HOSTNAME evita redirecionamentos ruins
      KC_HOSTNAME_STRICT: "false"
      KC_HOSTNAME_STRICT_HTTPS: "false"
      KC_HTTP_ENABLED: "true"
      KC_HEALTH_ENABLED: "true"
    volumes:
      - ./keycloak/realm-export.json:/opt/keycloak/data/import/realm-export.json
    ports: ["8081:8080"]
    healthcheck:
      # checa se a porta 8080 está aceitando conexões TCP (sem curl/wget)
      test: ["CMD-SHELL", "bash -lc 'exec 3<>/dev/tcp/127.0.0.1/8080'"]
      interval: 10s
      timeout: 3s
      retries: 30
    networks: [net]

  backend:
    build: .
    container_name: english-backend
    environment:
      SPRING_PROFILES_ACTIVE: docker
      SPRING_DATASOURCE_URL: jdbc:mysql://db:3306/english?createDatabaseIfNotExist=true&useSSL=false&allowPublicKeyRetrieval=true&serverTimezone=UTC
      SPRING_DATASOURCE_USERNAME: app
      SPRING_DATASOURCE_PASSWORD: app

      # Usa JWK interno do Keycloak (evita depender do issuer externo)
      SPRING_SECURITY_OAUTH2_RESOURCESERVER_JWT_JWK_SET_URI: http://keycloak:8080/realms/english-realm/protocol/openid-connect/certs
      # (opcional) se seu código usa:
      KC_AUTH_SERVER_URL: http://keycloak:8080/realms/english-realm
    ports: ["8080:8080"]
    depends_on:
      db:
        condition: service_healthy
      keycloak:
        condition: service_healthy
    networks: [net]

networks:
  net:

volumes:
  db_data:
